#!/bin/bash

# Script de surveillance du bot Conan
# √Ä placer dans /root/bot/bot_conan/ sur le VPS
# Usage: ./monitor_bot.sh

LOG_FILE="/var/log/bot_conan_monitor.log"
SERVICE_NAME="bot_conan"
BROKEN_PIPE_THRESHOLD=5  # Nombre d'erreurs Broken pipe avant red√©marrage
TIME_WINDOW=300          # Fen√™tre de temps en secondes (5 minutes)

# Fonction de logging
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Fonction pour compter les erreurs Broken pipe r√©centes
count_broken_pipe_errors() {
    local since_time=$(date -d "$TIME_WINDOW seconds ago" '+%Y-%m-%d %H:%M:%S')
    local error_count=$(journalctl -u "$SERVICE_NAME" --since "$since_time" | grep -c "Broken pipe\|Connexion RCON perdue" || echo "0")
    echo "$error_count"
}

# Fonction pour v√©rifier si le service est actif
is_service_running() {
    systemctl is-active --quiet "$SERVICE_NAME"
    return $?
}

# Fonction pour red√©marrer le service
restart_service() {
    log_message "üîÑ Red√©marrage du service $SERVICE_NAME..."
    systemctl restart "$SERVICE_NAME"
    
    # Attendre 10 secondes et v√©rifier si le red√©marrage a r√©ussi
    sleep 10
    if is_service_running; then
        log_message "‚úÖ Service $SERVICE_NAME red√©marr√© avec succ√®s"
        return 0
    else
        log_message "‚ùå √âchec du red√©marrage du service $SERVICE_NAME"
        return 1
    fi
}

# Fonction principale de surveillance
monitor_bot() {
    log_message "üöÄ D√©marrage de la surveillance du bot Conan"
    
    while true; do
        # V√©rifier si le service est en cours d'ex√©cution
        if ! is_service_running; then
            log_message "‚ö†Ô∏è Service $SERVICE_NAME arr√™t√©, tentative de red√©marrage..."
            restart_service
        else
            # Compter les erreurs Broken pipe r√©centes
            broken_pipe_count=$(count_broken_pipe_errors)
            
            if [ "$broken_pipe_count" -ge "$BROKEN_PIPE_THRESHOLD" ]; then
                log_message "üö® D√©tection de $broken_pipe_count erreurs RCON dans les derni√®res $((TIME_WINDOW/60)) minutes"
                log_message "üîß Seuil de $BROKEN_PIPE_THRESHOLD erreurs atteint, red√©marrage pr√©ventif..."
                restart_service
                
                # Attendre plus longtemps apr√®s un red√©marrage pr√©ventif
                log_message "‚è≥ Attente de 2 minutes avant la prochaine v√©rification..."
                sleep 120
            else
                log_message "‚úÖ Service $SERVICE_NAME fonctionne correctement ($broken_pipe_count erreurs RCON r√©centes)"
            fi
        fi
        
        # Attendre 60 secondes avant la prochaine v√©rification
        sleep 60
    done
}

# Fonction pour installer le service de surveillance
install_monitor_service() {
    cat > /etc/systemd/system/bot_conan_monitor.service << EOF
[Unit]
Description=Bot Conan Monitor
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/root/bot/bot_conan
ExecStart=/root/bot/bot_conan/monitor_bot.sh
Restart=always
RestartSec=30
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable bot_conan_monitor
    log_message "üì¶ Service de surveillance install√© et activ√©"
}

# Fonction pour d√©sinstaller le service de surveillance
uninstall_monitor_service() {
    systemctl stop bot_conan_monitor 2>/dev/null
    systemctl disable bot_conan_monitor 2>/dev/null
    rm -f /etc/systemd/system/bot_conan_monitor.service
    systemctl daemon-reload
    log_message "üóëÔ∏è Service de surveillance d√©sinstall√©"
}

# Gestion des arguments de ligne de commande
case "${1:-monitor}" in
    "monitor")
        monitor_bot
        ;;
    "install")
        install_monitor_service
        echo "‚úÖ Service de surveillance install√©. D√©marrez-le avec: systemctl start bot_conan_monitor"
        ;;
    "uninstall")
        uninstall_monitor_service
        echo "‚úÖ Service de surveillance d√©sinstall√©"
        ;;
    "status")
        echo "üìä Statut du bot:"
        systemctl status "$SERVICE_NAME" --no-pager -l
        echo ""
        echo "üìä Statut du monitoring:"
        systemctl status bot_conan_monitor --no-pager -l 2>/dev/null || echo "Service de monitoring non install√©"
        echo ""
        echo "üìà Erreurs RCON r√©centes (derni√®res 5 minutes):"
        error_count=$(count_broken_pipe_errors)
        echo "Nombre d'erreurs: $error_count"
        ;;
    "logs")
        echo "üìã Logs du bot (derni√®res 50 lignes):"
        journalctl -u "$SERVICE_NAME" -n 50 --no-pager
        echo ""
        echo "üìã Logs du monitoring:"
        tail -20 "$LOG_FILE" 2>/dev/null || echo "Aucun log de monitoring trouv√©"
        ;;
    *)
        echo "Usage: $0 {monitor|install|uninstall|status|logs}"
        echo ""
        echo "Commandes:"
        echo "  monitor    - Surveiller le bot en continu (d√©faut)"
        echo "  install    - Installer le service de surveillance automatique"
        echo "  uninstall  - D√©sinstaller le service de surveillance"
        echo "  status     - Afficher le statut du bot et du monitoring"
        echo "  logs       - Afficher les logs r√©cents"
        exit 1
        ;;
esac 